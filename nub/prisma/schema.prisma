generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

enum UserRole {
  CUSTOMER
  DELIVERY_PERSON
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum NotificationPreference {
  EMAIL
  SMS
  NONE
}

model User {
  id           String    @id @default(cuid())
  name         String
  // email and phone number are uniq and optional because we can have users who signed up with phone number or email
  email        String?   @unique
  phoneNumber  String?   @unique
  otp          String?
  role         UserRole  @default(CUSTOMER)
  refreshToken String?
  picture      String?
  orders       Order[]   @relation("CustomerOrders")
  deliveries   Order[]   @relation("DeliveryPersonOrders")
  reviews      Review[]
  addresses    Address[]
  settings     Settings?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Restaurant {
  id           String    @id @default(cuid())
  name         String
  address      String
  email        String?   @unique
  phoneNumber  String?   @unique
  refreshToken String?
  picture      String?
  rating       Float
  dishes       Dish[]
  orders       Order[]
  reviews      Review[]
  addresses    Address[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Dish {
  id           String      @id @default(cuid())
  name         String
  description  String
  price        Float
  rating       Float
  pictures     String[]
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Order {
  id               String      @id @default(cuid())
  status           OrderStatus @default(PENDING)
  total            Float
  customerId       String
  customer         User        @relation("CustomerOrders", fields: [customerId], references: [id])
  deliveryPersonId String?
  deliveryPerson   User?       @relation("DeliveryPersonOrders", fields: [deliveryPersonId], references: [id])
  restaurantId     String
  restaurant       Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems       OrderItem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  dishId   String
  dish     Dish   @relation(fields: [dishId], references: [id])
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
}

model Review {
  id           String     @id @default(cuid())
  rating       Int        @default(1)
  comment      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Address {
  id           String      @id @default(cuid())
  name         String
  street       String
  city         String
  state        String
  country      String
  postalCode   String
  latitude     Float
  longitude    Float
  userId       String?
  user         User?       @relation(fields: [userId], references: [id])
  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
}

model Settings {
  id                     String                 @id @default(cuid())
  userId                 String                 @unique
  notificationPreference NotificationPreference @default(EMAIL)
  darkMode               Boolean                @default(false)
  enableDataCollection   Boolean                @default(true)
  user                   User                   @relation(fields: [userId], references: [id])
}

// model admin {
//   id               String   @id @default(cuid())
//   name             String
//   surname          String
//   email            String   @unique
//   password         String
//   phone            String   @unique
//   refreshToken     String?
//   twoFactorSecret  String?
//   twoFactorEnabled Boolean  @default(false)
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt
// }

// model Client {
//   id               String   @id @default(cuid())
//   name             String
//   surname          String?
//   email            String   @unique
//   otp              String
//   phone            String?  @unique
//   picture          String?
//   toDelete         Boolean  @default(false)
//   notified         Boolean  @default(false)
//   notifiedMedia    String   @default("email")
//   dataConsent      Boolean  @default(true)
//   verfied          Boolean  @default(false)
//   // address          Address[] @relation("ClientAddress")
//   orders           order[]  @relation("ClientOrders")
//   refreshToken     String?
//   twoFactorSecret  String?
//   twoFactorEnabled Boolean  @default(false)
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt
//   // Address          Address[]
// }

// model Vendor {
//   id               String        @id @default(cuid())
//   type             VENDOR_TYPE
//   status           VENDOR_STATUS
//   name             String
//   email            String        @unique
//   password         String
//   phone            String        @unique
//   // address          Address[]     @relation("VendorAddress")
//   orders           order[]       @relation("VendorOrders")
//   products         product[]     @relation("VendorProduct")
//   refreshToken     String?
//   twoFactorSecret  String?
//   twoFactorEnabled Boolean       @default(false)
//   createdAt        DateTime      @default(now())
//   updatedAt        DateTime      @updatedAt
//   // Address          Address[]
// }

// // model Courier {
// //   id               String         @id @default(cuid())
// //   name             String
// //   surname          String
// //   status           COURIER_STATUS
// //   email            String         @unique
// //   phone            String         @unique
// //   password         String
// //   orders           order[]        @relation("CourierOrders")
// //   refreshToken     String?
// //   twoFactorSecret  String?
// //   twoFactorEnabled Boolean        @default(false)
// //   address          Address?       @relation("CourierAddress", fields: [addressId], references: [id])
// //   createdAt        DateTime       @default(now())
// //   updatedAt        DateTime       @updatedAt
// //   addressId        String?
// //   Address          Address?       @relation(fields: [addressId], references: [id])
// // }

// // model Address {
// //   id        String   @id @default(cuid())
// //   street    String?
// //   city      String?
// //   country   String?
// //   zip       String?
// //   address   String
// //   name      String
// //   toDelete  Boolean  @default(false)
// //   clientId  String?
// //   client    Client?  @relation("ClientAddress", fields: [clientId], references: [id])
// //   vendorId  String?
// //   vendor    Vendor?  @relation("VendorAddress", fields: [vendorId], references: [id])
// //   courierId String?  @unique
// //   courier   Courier? @relation("CourierAddress", fields: [courierId], references: [id])
// //   createdAt DateTime @default(now())
// //   updatedAt DateTime @updatedAt
// // }

// model product {
//   id          String           @id @default(cuid())
//   name        String
//   description String
//   price       Float
//   images      String[]
//   inStock     Int
//   category    PRODUCT_CATEGORY
//   vendorId    String
//   vendor      Vendor           @relation("VendorProduct", fields: [vendorId], references: [id])
//   itemOrders  orderItem[]      @relation("ProductItems")
//   createdAt   DateTime         @default(now())
//   updatedAt   DateTime         @updatedAt
// }

// model order {
//   id        String       @id @default(cuid())
//   status    ORDER_STATUS
//   clientId  String
//   client    Client       @relation("ClientOrders", fields: [clientId], references: [id])
//   vendorId  String
//   vendor    Vendor       @relation("VendorOrders", fields: [vendorId], references: [id])
//   items     orderItem[]  @relation("OrderItems")
//   courierId String?
//   // courier   Courier?     @relation("CourierOrders", fields: [courierId], references: [id])
//   createdAt DateTime     @default(now())
//   updatedAt DateTime     @updatedAt
// }

// model orderItem {
//   id        String   @id @default(cuid())
//   quantity  Int
//   productId String
//   product   product  @relation("ProductItems", fields: [productId], references: [id])
//   orderId   String
//   order     order    @relation("OrderItems", fields: [orderId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// enum ROLE {
//   ADMIN
//   CLIENT
//   VENDOR
//   VENDOR_ADMIN
//   COURIER
// }

// enum PRODUCT_CATEGORY {
//   FOOD
//   DRINK
//   CLOTHING
//   ELECTRONICS
//   OTHER
// }

// enum ORDER_STATUS {
//   PENDING
//   IN_PROGRESS
//   DELIVERED
//   CANCELLED
// }

// enum VENDOR_TYPE {
//   RESTAURANT
//   SHOP
//   OTHER
// }

// enum CLIENT_STATUS {
//   ACTIVE
//   INACTIVE
// }

// enum CLIENT_TYPE {
//   REGULAR
//   PREMIUM
// }

// enum VENDOR_STATUS {
//   WORKINGTAKEAWAY
//   WORKINGDELIVERY
//   CLOSED
// }

// enum COURIER_STATUS {
//   AVAILABLE
//   BUSY
//   OFFLINE
// }
