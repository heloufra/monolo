generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  CUSTOMER
  DELIVERY_PERSON
  ADMIN
  RESTAURANT
  @@map("userrole")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  @@map("orderstatus")
}

enum NotificationPreference {
  EMAIL
  SMS
  NONE
  @@map("notificationpreference")
}

model User {
  id           String    @id @default(uuid())
  name         String?
  // email and phone number are uniq and optional because we can have users who signed up with phone number or email
  email        String?   @unique
  phoneNumber  String?   @unique
  otp          String?
  role         UserRole  @default(CUSTOMER)
  picture      String?
  orders       Order[]   @relation("CustomerOrders")
  deliveries   Order[]   @relation("DeliveryPersonOrders")
  reviews      Review[]
  addresses    Address[]
  settings     Settings?
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @updatedAt
  @@map("users")
}

model Restaurant {
  id           String    @id @default(uuid())
  name         String
  address      String?
  email        String?   @unique
  phoneNumber  String?   @unique
  picture      String?
  rating       Float?
  dishes       Dish[]
  orders       Order[]
  reviews      Review[]
  addresses    Address[]
  createdAt    DateTime?  @default(now())
  updatedAt    DateTime?  @updatedAt
  @@map("restaurants")
}

model Dish {
  id           String      @id @default(uuid())
  name         String
  description  String
  price        Float
  rating       Float
  pictures     String[]
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  reviews      Review[]
  @@map("dishes")
}

model Order {
  id               String      @id @default(uuid())
  status           OrderStatus @default(PENDING)
  total            Float
  customerId       String
  customer         User        @relation("CustomerOrders", fields: [customerId], references: [id])
  deliveryPersonId String?
  deliveryPerson   User?       @relation("DeliveryPersonOrders", fields: [deliveryPersonId], references: [id])
  restaurantId     String
  restaurant       Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems       OrderItem[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  @@map("orders")
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  dishId   String
  dish     Dish   @relation(fields: [dishId], references: [id])
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  @@map("order_items")
}

model Review {
  id           String     @id @default(uuid())
  rating       Int        @default(1)
  comment      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  dishId       String?
  dish         Dish? @relation(fields: [dishId], references: [id])
  @@map("reviews")
}

model Address {
  id           String      @id @default(uuid())
  name         String
  street       String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  latitude     Float?
  longitude    Float?
  userId       String?
  user         User?       @relation(fields: [userId], references: [id])
  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  @@map("addresses")
}

model Settings {
  id                     String                 @id @default(uuid())
  userId                 String                 @unique
  notificationPreference NotificationPreference @default(EMAIL)
  darkMode               Boolean                @default(false)
  enableDataCollection   Boolean                @default(true)
  user                   User                   @relation(fields: [userId], references: [id])
  createdAt              DateTime?               @default(now())
  updatedAt              DateTime?              @updatedAt
  @@map("settings")
}